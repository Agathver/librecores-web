# Learn more about services, parameters and containers at
# http://symfony.com/doc/current/book/service_container.html
imports:
    - { resource: legacy_aliases.yml }


services:
    _defaults:
        autowire: true
        autoconfigure: true
        public: false

    # makes classes in src/Librecores/ProjectRepoBundle available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    Librecores\ProjectRepoBundle\:
        resource: '../../../ProjectRepoBundle/*'
        exclude: '../../../ProjectRepoBundle/{Entity, DataFixtures}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    Librecores\ProjectRepoBundle\Controller\:
        resource: '../../../ProjectRepoBundle/Controller'
        tags: ['controller.service_arguments']


    # Consumer Services (called through RabbitMQ)
    App\Consumer\UpdateProjectInformation: ~

    # Utilities
    Librecores\ProjectRepoBundle\Util\MarkupToHtmlConverter:
        arguments:
            - '@logger'
            - '@exercise_html_purifier.default'

    App\Service\GitHub\GitHubApiService:
        arguments:
            - '@app.cache.githubapi'
            - '@router'

    App\Service\QueueDispatcherService:
        calls:
            - [setContainer, ['@service_container']]

    App\RepoCrawler\RepoCrawlerFactory: ~

# Learn more about services, parameters and containers at
# http://symfony.com/doc/current/book/service_container.html
parameters:
#    parameter_name: value

services:
    _defaults:
        autowire: true
        autoconfigure: true
        public: false

    # makes classes in src/Librecores/ProjectRepoBundle available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../../src/App/*'
        exclude: '../../src/App/{Entity, DataFixtures}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../../src/App/Controller'
        tags: ['controller.service_arguments']

    # Twig date extension - http://twig-extensions.readthedocs.io/en/latest/date.html
    Twig\Extensions\DateExtension:
        autowire: false
        # Autowire inject a TranslatorInterface into the constructor of the extension. If that happens, the extension
        # thinks it can be translated -- but we don't have any translations available, therefore the autowire is set to
        # false

    FOS\UserBundle\Mailer\MailerInterface: '@fos_user.mailer'

    App\Command\UpdateReposCommand:
        arguments:
            $producer: '@old_sound_rabbit_mq.update_project_info_producer'

    App\Util\MarkupToHtmlConverter:
        arguments:
            - '@logger'
            - '@exercise_html_purifier.default'

    App\Util\GithubApiService:
        arguments:
            - '@security.token_storage'
            - '@app.cache.githubapi'
            - '@router'

    App\Util\QueueDispatcherService:
        calls:
            - [setContainer, ['@service_container']]

    App\Util\ProcessCreator: ~

    # Forms
    App\Form\Type\ProjectType:
        tags:
            - { name: form.type, alias: project }

    App\Form\Type\OrganizationType:
        tags:
            - { name: form.type, alias: organization }

    App\Form\Extension\ButtonTypeIconExtension:
        tags:
            - { name: form.type_extension, extended_type: Symfony\Component\Form\Extension\Core\Type\ButtonType }

    App\Form\Type\PurifiedTextareaType:
        arguments:
            - '@librecores.form.transformer.html_purifier'
        tags:
            - { name: form.type, alias: purified_textarea }

    Exercise\HTMLPurifierBundle\Form\HTMLPurifierTransformer:
        arguments:
            - '@exercise_html_purifier.default'

    App\EventListener\OAuthRegistrationListener:
        arguments:
            - '@fos_user.user_manager'
            - '@librecores_user_provider'
            - '@session'
        tags:
            - { name: kernel.event_subscriber }

    # User/auth management
    App\Security\UserManager:
        arguments:
            - '@fos_user.util.password_updater'
            - '@fos_user.util.canonical_fields_updater'
            - '@fos_user.object_manager'
            - '%fos_user.model.user.class%'

    App\Security\Core\User\LibreCoresUserProvider:
        arguments:
            - '@fos_user.user_manager'
            - '@validator'
            - '@session'

    # Security
    App\Security\ProjectVoter:
        tags:
            - { name: security.voter }
        public: false

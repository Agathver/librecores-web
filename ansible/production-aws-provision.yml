---
# Initial setup of AWS environment to host all LibreCores instances
- name: Create AWS initial setup
  hosts: localhost
  connection: local
  gather_facts: False

  tasks:
    - name: "Create EC2 security group"
      ec2_group:
        name: librecores-production-web
        description: "Librecores web security group"
        region: "{{ aws_region }}"
        rules:
          # allow incoming traffic for HTTP(S) and SSH
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 443
            to_port: 443
            cidr_ip: 0.0.0.0/0
        rules_egress:
          # allow all outgoing traffic
          - proto: -1
            from_port: 0
            to_port: 0
            cidr_ip: 0.0.0.0/0

    - name: "Production: Create SSH key"
      ec2_key:
        region: "{{ aws_region }}"
        name: librecores-production
        key_material: "{{ ssh_key_production_pub }}"
        wait: true

    - name: "Production: Provision EC2 instance"
      ec2_instance:
         name: production
         instance_type: t3.medium
         # don't automatically buy new CPU credits if boost pool is depleted
         cpu_credit_specification: standard
         region: "{{ aws_region }}"
         image_id: "{{ ami_id }}"
         key_name: librecores-production
         ebs_optimized: yes
         security_group: librecores-production-web
         wait: true
         filters:
           tag:group: librecores-production
           instance-state-name: "running"
         tags:
            group: librecores-production
      register: instance_production_ec2_web

    - name: "Production: Create and attach EBS volume to instance"
      ec2_vol:
        name: librecores-production-data
        instance: "{{ instance_production_ec2_web.instances[0].instance_id }}"
        region: "{{ aws_region }}"
        # The device name is actually not used on Linux with Nitro-based EC2
        # instances, like t3 instances. They are called /dev/nvm* instead.
        device_name: /dev/sdf
        volume_size: "40" # GiB
        volume_type: gp2 # general-purpose SSD
        encrypted: no
        delete_on_termination: no
      register: vol_production_ec2_web

    - name: "Production: Assign Elastic IP (public)"
      ec2_eip:
        region: "{{ aws_region }}"
        public_ip: "{{ instance_production_ec2_web.instances[0].public_ip_address }}"
        reuse_existing_ip_allowed: yes
        state: present
        device_id: "{{ instance_production_ec2_web.instances[0].instance_id }}"
        in_vpc: yes
      register: ip_production_ec2_web

    - name: Delete any existing SSH key for that host
      shell: ssh-keygen -R {{ ip_production_ec2_web.public_ip }}

    - name: Write the new ec2 instance host key to known hosts
      connection: local
      shell: "ssh-keyscan -H {{ ip_production_ec2_web.public_ip }} >> ~/.ssh/known_hosts"

    - name: Wait for SSH
      wait_for:
        host: "{{ ip_production_ec2_web.public_ip }}"
        port: 22
        delay: 10
        timeout: 320
        state: started

    - name: Refresh inventory
      meta: refresh_inventory

  vars_files:
    - vars/production-aws.yml
    - secrets/production-aws-sshkeys.secrets.yml

- name: Install python2 on instance
  hosts: tag_group_librecores_production
  gather_facts: False
  user: ubuntu
  become: true
  tasks:
    - name: 'install python2'
      raw: sudo apt-get -y install python-simplejson

- name: Prepare EBS disk
  hosts: tag_group_librecores_production
  gather_facts: True
  user: ubuntu
  become: true
  tasks:
    - name: Format disk
      filesystem: fstype=ext4 dev=/dev/nvme1n1
    - name: Mount volume
      mount:
        name: /data
        src: /dev/nvme1n1
        opts: noatime
        fstype: ext4
        state: mounted
